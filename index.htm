<!DOCTYPE html>
<html lang="de">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Garten Nr. 40 - Kleingartenverein Pfuhl Eile</title>

<!-- Firebase (compat) -->
<script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-auth-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore-compat.js"></script>

<style>
  :root{
    --glass-bg: rgba(255,255,255,0.34);
    --muted: #4b5563;
    --accent-green: #16a34a;
    --radius: 14px;
  }
  *{box-sizing:border-box}
  html,body{height:100%}
  body{
    margin:0;
    font-family: -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial;
    color:#0f172a;
    background: linear-gradient(135deg, rgba(212,244,222,0.95), rgba(238,249,240,0.92));
    -webkit-font-smoothing:antialiased;
    padding-bottom:24px;
  }
  header { padding:14px 16px 6px; text-align:center; }
  header h1 { margin:0; font-size:1.25rem; font-weight:600; color:#052e16; }

  .container{ max-width:1100px; margin:12px auto; padding:0 12px; display:grid; gap:12px; }

  .iebar{ display:flex; gap:8px; justify-content:center; align-items:center; padding:8px; }
  .iebar button{ background: linear-gradient(180deg, rgba(255,255,255,0.9), rgba(255,255,255,0.8)); border:1px solid rgba(6,95,70,0.06); padding:8px 12px; border-radius:12px; font-size:14px; cursor:pointer; }

  .glass{ background: var(--glass-bg); border-radius: var(--radius); border: 1px solid rgba(255,255,255,0.6); box-shadow: 0 8px 30px rgba(2,6,23,0.06); backdrop-filter: blur(12px) saturate(1.1); padding:12px; }

  .weather{ display:flex; flex-direction:column; align-items:center; gap:6px; text-align:center; }
  .weather-top{ display:flex; align-items:center; gap:10px; width:100%; justify-content:center; }
  .weather-icon{ width:28px; height:28px; display:inline-block; }
  .weather-temp{ font-weight:700; font-size:1.1rem; color:#064e3b; }
  .weather-loc{ font-size:0.9rem; color:var(--muted); }
  .weather-divider{ width:60%; height:1px; background: rgba(6,95,70,0.08); border-radius:2px; }
  .rain-prob{ font-size:0.9rem; color:var(--muted); }

  /* new top boxes wrapper (water + winter) */
  .topBoxes{ display:flex; gap:10px; flex-wrap:wrap; align-items:flex-start; }
  .miniBox{ min-width:160px; display:flex; flex-direction:column; align-items:center; gap:8px; padding:10px; border-radius:12px; }
  #waterBox .btn, #winterBox .btn { padding:8px 10px; border-radius:10px; border:none; cursor:pointer; background: linear-gradient(180deg,#ffffff,#f1f8f1); }
  .iconSmall{ font-size:18px; margin-right:6px; vertical-align:middle; }

  .todo-list{ display:flex; flex-direction:column; gap:6px; margin-top:6px; }
  .todo-item{ background: rgba(255,255,255,0.5); border-radius:10px; padding:8px; font-size:0.95rem; display:flex; justify-content:space-between; align-items:center; }

  .mainGrid{ display:grid; gap:12px; grid-template-columns:1fr; }
  @media(min-width:980px){ .mainGrid{ grid-template-columns: 1.1fr 0.9fr; } }

  .cal-controls{ display:flex; gap:8px; align-items:center; justify-content:space-between; margin-bottom:8px; flex-wrap:wrap; }
  .cal-btn{ background:transparent; border:1px solid rgba(6,95,70,0.06); border-radius:8px; padding:6px 8px; cursor:pointer; font-size:14px; }
  .month-year{ font-weight:600; color:#063; font-size:1rem; padding:6px 8px; border-radius:8px; background:rgba(255,255,255,0.6); }

  .dow-row{ display:grid; grid-template-columns: repeat(7,1fr); gap:6px; margin-bottom:6px; font-size:12px; color:var(--muted); text-align:center; }
  .calendar-grid{ display:grid; grid-template-columns: repeat(7, 1fr); gap:6px; }
  .day{ min-height:72px; background: rgba(255,255,255,0.7); border-radius:10px; padding:6px; font-size:13px; position:relative; overflow:hidden; cursor:pointer; }
  .day.selected{ outline:2px solid var(--accent-green); }
  .num{ font-size:12px; color:var(--muted); margin-bottom:6px; }
  .event-chip{ display:block; padding:6px 8px; border-radius:10px; font-size:12px; margin-top:6px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; }
  .chip-harvest{ background: rgba(239,68,68,0.12); border:1px solid rgba(239,68,68,0.18); color:#7f1d1d; }
  .chip-prune{ background: rgba(245,158,11,0.12); border:1px solid rgba(245,158,11,0.18); color:#6b4508; }

  .watering-icon{ position:absolute; right:6px; bottom:6px; font-size:16px; color:var(--accent-green); }

  .rightCol{ display:flex; flex-direction:column; gap:12px; }
  .item{ background: rgba(255,255,255,0.6); padding:8px; border-radius:10px; font-size:13px; }

  .plants-header{ display:flex; align-items:center; justify-content:space-between; gap:8px; }
  .toggle-btn{ background:transparent; border:none; color:var(--accent-green); font-weight:600; cursor:pointer; margin-top:8px; }
  .plants-grid{ display:grid; gap:10px; grid-template-columns: repeat(auto-fit,minmax(220px,1fr)); margin-top:8px; }
  .plant-box{ background: rgba(255,255,255,0.7); border-radius:12px; padding:10px; font-size:13px; }
  .plant-section{ margin-top:8px; background: rgba(255,255,255,0.45); padding:8px; border-radius:10px; font-size:13px; }

  input[type="text"], input[type="number"], select{ padding:8px; border-radius:10px; border:1px solid rgba(0,0,0,0.06); font-size:14px; width:100%; background: rgba(255,255,255,0.9); }
  .small{ font-size:13px; color:var(--muted); }
  .hidden{ display:none!important; }

  /* modal */
  .modal-backdrop{ position:fixed; inset:0; background:rgba(2,6,23,0.4); display:flex; align-items:center; justify-content:center; z-index:2000; }
  .modal{ background: rgba(255,255,255,0.95); border-radius:12px; padding:14px; max-width:520px; width:92%; box-shadow:0 12px 40px rgba(2,6,23,0.15); }
  .modal header{ display:flex; justify-content:space-between; align-items:center; margin-bottom:8px; }
  .modal .list{ max-height:320px; overflow:auto; }
  .modal .list .row{ display:flex; align-items:center; gap:8px; padding:8px; border-radius:8px; background:rgba(245,250,245,1); margin-bottom:6px; }
  .modal .controls{ display:flex; gap:8px; align-items:center; }
  .icon-save{ color:var(--accent-green); font-weight:700; cursor:pointer; }
  .icon-close{ cursor:pointer; font-weight:700; }
</style>
</head>
<body>
<header><h1>Garten Nr. 40 - Kleingartenverein Pfuhl Eile</h1></header>

<div class="container">
  <!-- Import/Export bar -->
  <div class="iebar">
    <button id="exportBtn">Exportieren</button>
    <input id="importFile" type="file" accept=".json,application/json" style="display:none" />
    <button id="importBtn">Importieren</button>
    <div id="syncStatus" style="margin-left:12px;font-size:13px;color:var(--muted)"></div>
  </div>

  <!-- Weather -->
  <div class="glass weather" id="weatherBox" title="Wetter: Klick √∂ffnet wetter.com">
    <div class="weather-top">
      <img id="weatherIcon" class="weather-icon" alt="Wetter" src="">
      <div>
        <div class="weather-temp" id="weatherTemp">‚Äî¬∞C</div>
        <div class="weather-loc">Pfuhl</div>
      </div>
    </div>

    <div class="weather-divider" aria-hidden="true"></div>
    <div id="rainProb" class="rain-prob">Regenwahrscheinlichkeit: ‚Äî%</div>

    <!-- NEW: separator + extra infos -->
    <div class="weather-divider" aria-hidden="true"></div>
    <div id="waterHint" class="rain-prob">Gie√ühinweis: ‚Äî</div>
    <div class="weather-divider" aria-hidden="true"></div>
    <div id="frostWarn" class="rain-prob">Frostwarnung: ‚Äî</div>
    <div class="weather-divider" aria-hidden="true"></div>
    <div id="sunHours" class="rain-prob">Sonnenstunden: ‚Äî</div>
    <div class="weather-divider" aria-hidden="true"></div>
    <div id="windWarn" class="rain-prob">Wind: ‚Äî</div>
    <div class="weather-divider" aria-hidden="true"></div>
    <div id="pollenInfo" class="rain-prob">Pollenflug: ‚Äî</div>
  </div>

  <!-- ToDo -->
  <div class="glass">
    <h3 style="margin:0 0 8px 0;">ToDo</h3>
    <div id="todoList" class="todo-list"></div>
  </div>

  <!-- NEW TOP BOXES: Gie√üen + Winter-Checkliste -->
  <div class="topBoxes">
    <div class="glass miniBox" id="waterBox" style="flex:0 1 220px;">
      <div style="display:flex;align-items:center;gap:8px;">
        <button id="waterBtn" class="btn" title="Gie√üen f√ºr ausgew√§hlten Tag (klicken um umzuschalten)">
          <span class="iconSmall">üíß</span> Gie√üen
        </button>
      </div>
      <div class="small" style="text-align:center">Markiert im Kalender, wenn f√ºr einen Tag gegossen wurde.</div>
    </div>

    <div class="glass miniBox" id="winterBox" style="flex:0 1 280px;">
      <div style="display:flex;align-items:center;gap:8px;">
        <button id="winterBtn" class="btn" title="Winter-Checkliste √∂ffnen">
          <span class="iconSmall">üóíÔ∏è</span> Winter-Checkliste
        </button>
      </div>
      <div class="small" style="text-align:center">√ñffne eine anpassbare Checkliste (Popup).</div>
    </div>
  </div>

  <!-- Main -->
  <div class="mainGrid">
    <div class="glass calendar-area">
      <div class="cal-controls">
        <div class="left"><button class="cal-btn" id="prevMonth">‚Äπ</button></div>
        <div class="center"><div class="month-year" id="monthLabel">Monat</div><select id="yearSelect" class="small"></select></div>
        <div class="right"><button class="cal-btn" id="nextMonth">‚Ä∫</button></div>
      </div>

      <div class="dow-row" id="dowRow">
        <div class="dow">Mo</div><div class="dow">Di</div><div class="dow">Mi</div><div class="dow">Do</div><div class="dow">Fr</div><div class="dow">Sa</div><div class="dow">So</div>
      </div>

      <div class="calendar-grid" id="calendarGrid" aria-live="polite"></div>
    </div>

    <aside class="rightCol">
      <div class="glass events">
        <h3 style="margin:0 0 8px 0;">Ereignis-Liste</h3>
        <div id="eventList" class="small"></div>
      </div>

      <div class="glass notes">
        <h3 style="margin:0 0 8px 0;">Notizen</h3>
        <div style="display:flex; gap:8px; margin-bottom:8px;">
          <input id="noteInput" type="text" placeholder="Notiz eingeben‚Ä¶" />
          <button id="addNoteBtn">Hinzuf√ºgen</button>
        </div>
        <div id="notesList" class="small"></div>
      </div>
    </aside>
  </div>

  <!-- Plants collapsible -->
  <div class="glass" id="plantsSection">
    <div class="plants-header">
      <h3 style="margin:0">Pflanzen</h3>
      <button class="toggle-btn" id="plantsToggle">‚ñº Pflanzen anzeigen</button>
    </div>

    <div id="plantArea" class="plants-grid hidden" aria-hidden="true"></div>
    <div id="plantAdd" class="hidden" style="margin-top:8px;">
      <input id="newPlantName" type="text" placeholder="Neue Pflanze Name" />
      <div style="margin-top:8px;"><button id="addPlantBtn">Hinzuf√ºgen</button></div>
    </div>
  </div>
</div>

<!-- Winter checklist modal (hidden by default) -->
<div id="modalBackdrop" class="hidden" aria-hidden="true">
  <div class="modal">
    <header>
      <div style="display:flex;gap:10px;align-items:center;">
        <span class="icon-save" id="saveChecklist" title="Speichern">üíæ</span>
        <strong>Winter-Checkliste</strong>
      </div>
      <div>
        <span class="icon-close" id="closeChecklist">‚úï</span>
      </div>
    </header>
    <div style="margin-bottom:8px;">
      <input id="newChecklistItem" type="text" placeholder="Neues Element hinzuf√ºgen" style="width:70%">
      <button id="addChecklistBtn">+</button>
    </div>
    <div class="list" id="checklistItems"></div>
  </div>
</div>

<script>
/* ===========================
   App state (kept from your working version)
   =========================== */
const months = ["Jan","Feb","M√§r","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"];

const plants = [
  {name:"Hibiskus / Roseneibisch", harvest:false, cut:[6,7]},
  {name:"Zuckerrohr-Palmen", harvest:false, cut:[5,6]},
  {name:"Apfelbaum", harvest:true, harvestRange:[8,9], cut:[2,3]},
  {name:"Kirschbaum", harvest:true, harvestRange:[6,7], cut:[2,3]},
  {name:"Pflaumenbaum", harvest:true, harvestRange:[8,9], cut:[2,3]},
  {name:"Johannisbeere", harvest:true, harvestRange:[7,7], cut:[2,3]},
  {name:"Himbeere", harvest:true, harvestRange:[7,8], cut:[3,4]},
  {name:"Amerikanische Heidelbeere", harvest:true, harvestRange:[7,8], cut:[2,3]},
  {name:"Erdbeeren", harvest:true, harvestRange:[6,7], cut:[2,3]},
  {name:"Fetthenne", harvest:false, cut:[9,10]},
  {name:"K√ºrbis", harvest:true, unit:"St√ºck", harvestRange:[9,10]},
  {name:"Zucchini", harvest:true, unit:"St√ºck", harvestRange:[7,8]},
];

let events = []; // array of "YYYY-MM-DD | label" strings (keeps old display format)
let notes = [];  // array of {id,text,iso}
let wateringMap = {}; // { "YYYY-MM-DD": true }
let winterChecklist = []; // array of {id,text,done}

/* DOM refs */
const monthLabel = document.getElementById('monthLabel');
const yearSelect = document.getElementById('yearSelect');
const calendarGrid = document.getElementById('calendarGrid');
const eventList = document.getElementById('eventList');
const notesList = document.getElementById('notesList');
const noteInput = document.getElementById('noteInput');
const addNoteBtn = document.getElementById('addNoteBtn');
const todoList = document.getElementById('todoList');
const weatherIcon = document.getElementById('weatherIcon');
const weatherTemp = document.getElementById('weatherTemp');
const rainProbEl = document.getElementById('rainProb');
const waterBtn = document.getElementById('waterBtn');
const winterBtn = document.getElementById('winterBtn');
const modalBackdrop = document.getElementById('modalBackdrop');
const checklistItems = document.getElementById('checklistItems');
const newChecklistItem = document.getElementById('newChecklistItem');
const addChecklistBtn = document.getElementById('addChecklistBtn');
const saveChecklist = document.getElementById('saveChecklist');
const closeChecklist = document.getElementById('closeChecklist');
const exportBtn = document.getElementById('exportBtn');
const importBtn = document.getElementById('importBtn');
const importFile = document.getElementById('importFile');
const syncStatus = document.getElementById('syncStatus');

let current = new Date();
let selectedDateISO = null; // YYYY-MM-DD

/* ===========================
   Firebase setup (replace config)
   ===========================

  STEPS (kurze Anleitung):
  1) Gehe zu https://console.firebase.google.com/ und erstelle ein Projekt.
  2) Aktiviere "Firestore" (Datenbank) - Native Modus.
  3) In Project settings -> Your apps -> Web app -> Add app, kopiere die firebaseConfig (ersetzt das Platzhalter-Objekt unten).
  4) Setze unter Firestore Security Rules (nur f√ºr erste Tests) tempor√§r:
       rules_version = '2';
       service cloud.firestore {
         match /databases/{database}/documents {
           match /{document=**} {
             allow read, write: if true;
           }
         }
       }
     (Wichtig: √ñffne die Regeln sp√§ter sicherer mit Authentication.)
  5) Speichere die firebaseConfig in der Datei an der markierten Stelle und lade die Seite neu.

  Hinweis: Dieser Code nutzt anonyme Authentifizierung, damit mehrere Nutzer gleichzeitig schreiben k√∂nnen.
*/

let useFirestore = false;
let db = null;
const firebaseConfig = {
  apiKey: "AIzaSyB2UunTDA4JBfJIU2kqLnE_O3xQY44lIG0",
  authDomain: "gartenplaner-ca2cf.firebaseapp.com",
  projectId: "gartenplaner-ca2cf",
  storageBucket: "gartenplaner-ca2cf.appspot.com",
  messagingSenderId: "648271569301",
  appId: "1:648271569301:web:b3823f824cba58b180169c"
};;

  // If firebaseConfig is filled (check minimal required fields), initialize
try {
  if (firebaseConfig && firebaseConfig.apiKey) {
    firebase.initializeApp(firebaseConfig);
    // anonymous auth
    firebase.auth().signInAnonymously().catch((e)=>{ console.warn('Firebase auth',e); });
    db = firebase.firestore();
    useFirestore = true;
    syncStatus.textContent = 'Verbunden: Firebase (Realtime)';
    // set up listeners
    setupFirestoreListeners();
  } else {
    syncStatus.textContent = 'Lokaler Modus (kein Firebase konfiguriert)';
  }
} catch (err) {
  console.warn('Firebase init failed', err);
  syncStatus.textContent = 'Firebase-Fehler (Lokaler Modus)';
}

/* ===========================
   Firestore listeners & writes
   =========================== */
function setupFirestoreListeners(){
  if(!db) return;

  // events
  db.collection('events').orderBy('createdAt','desc').onSnapshot(snap=>{
    events = [];
    snap.forEach(doc=>{
      const d = doc.data();
      if(d.date && d.text){
        events.push(`${d.date} | ${d.text}`);
      }
    });
    renderEvents();
    renderCalendar();
  });

  // notes
  db.collection('notes').orderBy('createdAt','desc').onSnapshot(snap=>{
    notes = [];
    snap.forEach(doc=>{
      const d = doc.data();
      notes.push({ id: doc.id, text: d.text, iso: d.createdAt? d.createdAt.toDate().toISOString() : new Date().toISOString() });
    });
    renderNotes();
  });

  // plants (replace whole local plants if db has docs)
  db.collection('plants').onSnapshot(snap=>{
    const ptmp = [];
    snap.forEach(doc=>{
      const d = doc.data();
      ptmp.push(d);
    });
    // Only replace if collection not empty (so we keep local defaults otherwise)
    if(ptmp.length>0){
      // mutate local plants array to match DB
      plants.length = 0;
      ptmp.forEach(p=>plants.push(p));
      renderPlants();
      renderTodo();
      renderCalendar();
    }
  });

  // watering markers
  db.collection('watering').onSnapshot(snap=>{
    wateringMap = {};
    snap.forEach(doc=>{
      const d = doc.data();
      if(d.date) wateringMap[d.date] = true;
    });
    renderCalendar(); // watering icons are drawn in calendar
  });

  // winter checklist (single doc 'checklist/items' or doc id 'checklist')
  db.collection('appdata').doc('winterChecklist').onSnapshot(doc=>{
    const d = doc.data();
    if(d && Array.isArray(d.items)){
      winterChecklist = d.items;
      // If modal open -> render
      renderChecklistItems();
    }
  });
}

async function saveEventToFirestore(dateISO, text){
  if(!useFirestore || !db) {
    // fallback: local events array
    events.unshift(`${dateISO} | ${text}`);
    renderEvents(); renderCalendar();
    return;
  }
  try{
    await db.collection('events').add({ date: dateISO, text, createdAt: firebase.firestore.FieldValue.serverTimestamp() });
  }catch(e){ console.warn('saveEvent', e); }
}

async function toggleWateringFor(dateISO){
  if(!useFirestore || !db){
    if(wateringMap[dateISO]){ delete wateringMap[dateISO]; } else { wateringMap[dateISO] = true; }
    renderCalendar();
    return;
  }
  // check if doc exists with date == dateISO
  const q = await db.collection('watering').where('date','==',dateISO).get();
  if(!q.empty){
    // remove (use first match)
    const id = q.docs[0].id;
    await db.collection('watering').doc(id).delete();
  } else {
    await db.collection('watering').add({ date: dateISO, createdAt: firebase.firestore.FieldValue.serverTimestamp() });
  }
}

/* Winter checklist saves (store as single doc in collection 'appdata' id 'winterChecklist') */
async function saveChecklistToFirestore(){
  if(!useFirestore || !db){
    // local only: nothing special, we set winterChecklist
    renderChecklistItems();
    return;
  }
  try{
    await db.collection('appdata').doc('winterChecklist').set({ items: winterChecklist }, { merge:true });
  }catch(e){ console.warn('saveChecklist', e); }
}

/* ===========================
   Utility & rendering
   =========================== */
function uid(){ return Math.random().toString(36).slice(2,9); }
function pad(n){ return String(n).padStart(2,'0'); }
function isoFor(y,m,d){ return `${y}-${pad(m)}-${pad(d)}`; }

/* Year select */
function populateYears(){
  const y = new Date().getFullYear();
  yearSelect.innerHTML = '';
  for(let i=y-5;i<=y+5;i++){
    const opt = document.createElement('option');
    opt.value = i; opt.textContent = i;
    if(i===current.getFullYear()) opt.selected = true;
    yearSelect.appendChild(opt);
  }
}
populateYears();

/* Calendar rendering + selection + watering icons */
function renderCalendar(){
  calendarGrid.innerHTML = '';
  const y = current.getFullYear();
  const m = current.getMonth();
  monthLabel.textContent = current.toLocaleString('de-DE',{month:'long', year:'numeric'});

  const firstDate = new Date(y,m,1);
  const offset = (firstDate.getDay() + 6) % 7;
  for(let i=0;i<offset;i++){
    const blank = document.createElement('div');
    blank.className = 'day';
    blank.style.background='transparent';
    calendarGrid.appendChild(blank);
  }

  const daysInMonth = new Date(y,m+1,0).getDate();
  for(let d=1; d<=daysInMonth; d++){
    const cell = document.createElement('div');
    cell.className = 'day';
    const num = document.createElement('div'); num.className='num'; num.textContent = d+'.';
    cell.appendChild(num);
    const iso = isoFor(y,m+1,d);

    // show event chips (existing format "YYYY-MM-DD | text")
    events.forEach(ev=>{
      if(typeof ev === 'string' && ev.startsWith(iso + ' | ')){
        const txt = ev.split(' | ')[1] || ev;
        const chip = document.createElement('div');
        chip.className = 'event-chip ' + (txt.toLowerCase().includes('ernte') ? 'chip-harvest' : 'chip-prune');
        chip.textContent = txt;
        cell.appendChild(chip);
      }
    });

    // watering icon
    if(wateringMap[iso]){
      const w = document.createElement('span');
      w.className = 'watering-icon';
      w.title = 'Gegossen';
      w.textContent = 'üíß';
      cell.appendChild(w);
    }

    // selection behavior
    cell.addEventListener('click', ()=>{
      // clear prev selection
      document.querySelectorAll('.day.selected').forEach(el=>el.classList.remove('selected'));
      cell.classList.add('selected');
      selectedDateISO = iso;
    });

    calendarGrid.appendChild(cell);
  }
  renderTodo(); // update ToDo on calendar render
}

/* Events & notes rendering */
function renderEvents(){
  eventList.innerHTML = '';
  events.forEach(e=>{
    const div = document.createElement('div'); div.className='item';
    const [date,txt] = e.split(' | ');
    div.innerHTML = `<div style="font-weight:600">${txt}</div><div class="small" style="color:var(--muted)">${date}</div>`;
    eventList.appendChild(div);
  });
}

function renderNotes(){
  notesList.innerHTML = '';
  notes.slice().reverse().forEach(n=>{
    const div = document.createElement('div'); div.className='item';
    const txt = document.createElement('div'); txt.textContent = n.text;
    const meta = document.createElement('div'); meta.className='small'; meta.style.color='var(--muted)';
    meta.textContent = new Date(n.iso).toLocaleString('de-DE');
    const del = document.createElement('button'); del.textContent='√ó'; del.style.marginLeft='8px';
    del.onclick = async ()=> {
      if(useFirestore && db){
        // delete by text+iso approximation (simple approach): find doc with same iso
        const q = await db.collection('notes').where('createdAt','!=', null).get().catch(()=>null);
        // fallback: just remove locally
      }
      notes = notes.filter(x=>x.id!==n.id);
      renderNotes(); renderCalendar();
    };
    div.appendChild(txt); div.appendChild(meta); div.appendChild(del);
    notesList.appendChild(div);
  });
}

/* ToDo generation */
function renderTodo(){
  todoList.innerHTML = '';
  const month = current.getMonth() + 1;
  plants.forEach(p=>{
    if(Array.isArray(p.harvestRange) && p.harvestRange.length>=2){
      const [from,to] = p.harvestRange;
      const inRange = from <= to ? (month>=from && month<=to) : (month>=from || month<=to);
      if(inRange){
        const el = document.createElement('div'); el.className='todo-item'; el.textContent = p.name + ' - Ernte f√§llig';
        todoList.appendChild(el);
      }
    }
    if(Array.isArray(p.cut) && p.cut.length>=2){
      const [from,to] = p.cut;
      const inRange = from <= to ? (month>=from && month<=to) : (month>=from || month<=to);
      if(inRange){
        const el = document.createElement('div'); el.className='todo-item'; el.textContent = p.name + ' - Zuschnitt f√§llig';
        todoList.appendChild(el);
      }
    }
  });
}

/* Plants rendering (collapsible) */
const plantArea = document.getElementById('plantArea');
const plantAdd = document.getElementById('plantAdd');
const plantsToggle = document.getElementById('plantsToggle');

function renderPlants(){
  plantArea.innerHTML = '';
  plants.forEach((p, idx)=>{
    const box = document.createElement('div'); box.className='plant-box';
    const title = document.createElement('div'); title.style.fontWeight='700'; title.textContent = p.name; box.appendChild(title);

    // cut
    const cutSec = document.createElement('div'); cutSec.className='plant-section';
    const cutLabel = document.createElement('label');
    const cutCb = document.createElement('input'); cutCb.type='checkbox';
    let cutState = 0;
    cutCb.addEventListener('click', ()=>{
      cutState++;
      if(cutState===1){ saveEventToFirestore(isoFor(new Date().getFullYear(), new Date().getMonth()+1, new Date().getDate()), `${p.name}: Zuschnitt in Arbeit`); }
      else if(cutState===2){ saveEventToFirestore(isoFor(new Date().getFullYear(), new Date().getMonth()+1, new Date().getDate()), `${p.name}: Zuschnitt erledigt`); cutCb.disabled=true; }
    });
    cutLabel.appendChild(cutCb); cutLabel.append(' erledigt'); cutSec.appendChild(cutLabel);

    // cut period selects
    const fromSel = document.createElement('select'); const toSel = document.createElement('select');
    const emptyOpt = document.createElement('option'); emptyOpt.value=''; emptyOpt.text='-'; fromSel.appendChild(emptyOpt.cloneNode(true)); toSel.appendChild(emptyOpt.cloneNode(true));
    for(let i=1;i<=12;i++){ const o=document.createElement('option'); o.value=i; o.textContent = months[i-1]; if(p.cut && p.cut[0]===i) o.selected=true; fromSel.appendChild(o); const o2=o.cloneNode(true); if(p.cut && p.cut[1]===i) o2.selected=true; toSel.appendChild(o2); }
    const periodWrap = document.createElement('div'); periodWrap.style.marginTop='6px'; periodWrap.append('Zeitraum: '); periodWrap.appendChild(fromSel); periodWrap.append(' bis '); periodWrap.appendChild(toSel);
    fromSel.addEventListener('change', ()=>{ p.cut = [ Number(fromSel.value)||null, Number(toSel.value)||null ]; renderCalendar(); renderTodo(); });
    toSel.addEventListener('change', ()=>{ p.cut = [ Number(fromSel.value)||null, Number(toSel.value)||null ]; renderCalendar(); renderTodo(); });

    cutSec.appendChild(periodWrap);
    box.appendChild(cutSec);

    // harvest
    const harvSec = document.createElement('div'); harvSec.className='plant-section';
    const harvEnableLbl = document.createElement('label');
    const harvEnable = document.createElement('input'); harvEnable.type='checkbox';
    harvEnable.checked = !!p.harvest;
    harvEnable.addEventListener('change', ()=>{ p.harvest = harvEnable.checked; renderPlants(); renderTodo(); });
    harvEnableLbl.appendChild(harvEnable); harvEnableLbl.append(' Ernte aktivieren');
    harvSec.appendChild(harvEnableLbl);

    if(p.harvest){
      const harvDoneLabel = document.createElement('label');
      const harvCb = document.createElement('input'); harvCb.type='checkbox';
      let harvState = 0;
      const amount = document.createElement('input'); amount.type='number'; amount.placeholder = p.unit || 'kg';
      harvCb.addEventListener('click', ()=>{
        harvState++;
        if(harvState===1){ saveEventToFirestore(isoFor(new Date().getFullYear(), new Date().getMonth()+1, new Date().getDate()), `${p.name}: Ernte in Arbeit`); }
        else if(harvState===2){ saveEventToFirestore(isoFor(new Date().getFullYear(), new Date().getMonth()+1, new Date().getDate()), `${p.name}: Ernte erledigt ${amount.value||''} ${p.unit||'kg'}`); harvCb.disabled=true; }
      });
      harvDoneLabel.appendChild(harvCb); harvDoneLabel.append(' erledigt'); harvSec.appendChild(harvDoneLabel);

      // harvest range selects
      const hf = document.createElement('select'); const ht = document.createElement('select');
      hf.appendChild(emptyOpt.cloneNode(true)); ht.appendChild(emptyOpt.cloneNode(true));
      for(let i=1;i<=12;i++){ const o=document.createElement('option'); o.value=i; o.textContent = months[i-1]; if(p.harvestRange && p.harvestRange[0]===i) o.selected=true; hf.appendChild(o); const o2=o.cloneNode(true); if(p.harvestRange && p.harvestRange[1]===i) o2.selected=true; ht.appendChild(o2); }
      hf.addEventListener('change', ()=>{ p.harvestRange = [ Number(hf.value)||null, Number(ht.value)||null ]; renderTodo(); });
      ht.addEventListener('change', ()=>{ p.harvestRange = [ Number(hf.value)||null, Number(ht.value)||null ]; renderTodo(); });

      const harvRangeWrap = document.createElement('div');
      harvRangeWrap.append('Zeitraum: '); harvRangeWrap.appendChild(hf); harvRangeWrap.append(' bis '); harvRangeWrap.appendChild(ht);
      harvSec.appendChild(harvRangeWrap);
      harvSec.appendChild(document.createElement('br'));
      harvSec.appendChild(amount);
    }

    const del = document.createElement('button'); del.textContent = 'Pflanze l√∂schen'; del.style.marginTop = '8px';
    del.addEventListener('click', ()=>{ plants.splice(idx,1); renderPlants(); renderCalendar(); renderTodo(); });

    box.appendChild(harvSec);
    box.appendChild(del);
    plantArea.appendChild(box);
  });
}

/* toggle plants UI */
const toggleBtn = document.getElementById('plantsToggle');
toggleBtn.addEventListener('click', ()=>{
  const visible = !plantArea.classList.contains('hidden');
  if(visible){
    plantArea.classList.add('hidden'); plantAdd.classList.add('hidden'); toggleBtn.textContent = '‚ñº Pflanzen anzeigen';
  } else {
    plantArea.classList.remove('hidden'); plantAdd.classList.remove('hidden'); toggleBtn.textContent = '‚ñ≤ Pflanzen verbergen';
    renderPlants();
  }
});

/* add plant */
document.getElementById('addPlantBtn').addEventListener('click', ()=>{
  const name = document.getElementById('newPlantName').value.trim();
  if(!name) return;
  plants.push({ name, harvest:true, harvestRange:null, cut:null });
  document.getElementById('newPlantName').value = '';
  renderPlants();
  renderTodo();
});

/* export / import (keeps existing behavior) */
exportBtn.addEventListener('click', ()=>{
  const payload = { plants, events, notes };
  const blob = new Blob([JSON.stringify(payload, null, 2)], { type: 'application/json' });
  const a = document.createElement('a'); a.href = URL.createObjectURL(blob); a.download = `garten-dashboard-${new Date().toISOString().slice(0,10)}.json`; a.click(); URL.revokeObjectURL(a.href);
});
importBtn.addEventListener('click', ()=> importFile.click());
importFile.addEventListener('change', (e)=>{
  const f = e.target.files[0]; if(!f) return;
  const r = new FileReader();
  r.onload = ()=> {
    try{
      const data = JSON.parse(r.result);
      if(Array.isArray(data.plants)) { plants.length = 0; data.plants.forEach(p => plants.push(p)); }
      events = Array.isArray(data.events) ? data.events.slice() : [];
      notes = Array.isArray(data.notes) ? data.notes.slice() : [];
      renderPlants(); renderCalendar(); renderEvents(); renderNotes(); renderTodo();
      alert('Import erfolgreich.');
      // optionally push imported data to Firestore if enabled:
      if(useFirestore && db){
        // push plants (clear collection then add) - careful: destructive
        // For now we will not auto-overwrite DB on import to avoid destructive sync.
      }
    }catch(err){ alert('Import fehlgeschlagen: ' + err.message); }
  };
  r.readAsText(f);
});

/* Weather (robust loader, auto-refresh) */
async function loadWeather(){
  try {
    const url = 'https://api.open-meteo.com/v1/forecast?latitude=48.408&longitude=10.0375&daily=precipitation_probability_mean,precipitation_sum,temperature_2m_min,sunshine_duration,windspeed_10m_max&current_weather=true&timezone=Europe%2FBerlin';
    const res = await fetch(url);
    if(!res.ok) throw new Error('HTTP ' + res.status);
    const data = await res.json();

    const cw = data.current_weather || {};
    if (cw.temperature !== undefined) weatherTemp.textContent = Math.round(cw.temperature) + '¬∞C'; else weatherTemp.textContent = '‚Äî¬∞C';
    const code = Number(cw.weathercode ?? -1);
    if(code >= 0){
      if(code < 3) weatherIcon.src = 'https://img.icons8.com/ios-filled/50/000000/sun.png';
      else if(code < 61) weatherIcon.src = 'https://img.icons8.com/ios-filled/50/000000/partly-cloudy-day.png';
      else weatherIcon.src = 'https://img.icons8.com/ios-filled/50/000000/rain.png';
    } else weatherIcon.src = '';

    // rain probability
    const probArr = data.daily?.precipitation_probability_mean;
    const prob = Array.isArray(probArr) && probArr.length > 0 ? Math.round(probArr[0]) : null;
    rainProbEl.textContent = prob !== null ? 'Regenwahrscheinlichkeit: ' + prob + '%' : 'Regenwahrscheinlichkeit: ‚Äî%';

    // water hint (today + tomorrow precipitation sum)
    const precArr = data.daily?.precipitation_sum || [];
    const rainToday = Number(precArr[0] ?? 0);
    const rainTomorrow = Number(precArr[1] ?? 0);
    document.getElementById('waterHint').textContent = 'Gie√ühinweis: ' + ((rainToday + rainTomorrow) < 1 ? 'Gie√üen empfohlen' : 'Kein Gie√üen n√∂tig');

    // frost
    const tminArr = data.daily?.temperature_2m_min;
    const tmin = Array.isArray(tminArr) && tminArr.length>0 ? Number(tminArr[0]) : null;
    document.getElementById('frostWarn').textContent = 'Frostwarnung: ' + ((tmin !== null && tmin < 2) ? 'Achtung: Bodenfrost m√∂glich!' : 'Kein Frost erwartet');

    // sun hours
    const sunArr = data.daily?.sunshine_duration;
    let sunHours = '‚Äî';
    if(Array.isArray(sunArr) && sunArr.length > 0){
      let v = Number(sunArr[0]);
      if(isFinite(v)){
        if(v > 24) v = v / 3600;
        sunHours = (Math.round(v*10)/10) + 'h';
      }
    }
    document.getElementById('sunHours').textContent = 'Sonnenstunden: ' + sunHours;

    // wind
    const windArr = data.daily?.windspeed_10m_max;
    const windVal = (Array.isArray(windArr) && windArr.length>0) ? Number(windArr[0]) : (cw.windspeed ?? null);
    const windText = (windVal === null) ? '‚Äî' : (windVal > 50 ? 'Sturmwarnung! (' + windVal + ' km/h)' : windVal + ' km/h');
    document.getElementById('windWarn').textContent = 'Wind: ' + windText;

    // pollen (separate call)
    try{
      const pRes = await fetch('https://api.open-meteo.com/v1/forecast?latitude=48.408&longitude=10.0375&daily=alder_pollen,birch_pollen,grass_pollen,ragweed_pollen&timezone=Europe%2FBerlin');
      if(pRes.ok){
        const pData = await pRes.json();
        const grass = pData.daily?.grass_pollen;
        let pollenText = '‚Äî';
        if(Array.isArray(grass) && grass.length>0){
          const val = Number(grass[0]);
          const labels = ['keine Belastung','gering','mittel','hoch'];
          pollenText = labels[val] ?? String(val);
        }
        document.getElementById('pollenInfo').textContent = 'Pollenflug (Gr√§ser): ' + pollenText;
      } else document.getElementById('pollenInfo').textContent = 'Pollenflug: ‚Äî';
    }catch(pErr){
      document.getElementById('pollenInfo').textContent = 'Pollenflug: ‚Äî';
      console.warn('Pollen-API Fehler', pErr);
    }

    // ensure weather box opens wetter.com (single handler)
    const wb = document.getElementById('weatherBox');
    if(wb) wb.onclick = () => window.open('https://www.wetter.com/wetter/pfuhl/DE0004144.html','_blank');

  } catch(err){
    console.warn('Fehler beim Laden der Wetterdaten:', err);
    weatherTemp.textContent = '‚Äî¬∞C';
    rainProbEl.textContent = 'Regenwahrscheinlichkeit: ‚Äî%';
    document.getElementById('waterHint').textContent = 'Gie√ühinweis: ‚Äî';
    document.getElementById('frostWarn').textContent = 'Frostwarnung: ‚Äî';
    document.getElementById('sunHours').textContent = 'Sonnenstunden: ‚Äî';
    document.getElementById('windWarn').textContent = 'Wind: ‚Äî';
    document.getElementById('pollenInfo').textContent = 'Pollenflug: ‚Äî';
  }
}
// initial + refresh
loadWeather();
setInterval(loadWeather, 20 * 60 * 1000);

/* ===== initial render & controls ===== */
function renderAll(){
  renderCalendar();
  renderEvents();
  renderNotes();
  renderPlants();
}
renderAll();

document.getElementById('prevMonth').addEventListener('click', ()=>{ current.setMonth(current.getMonth()-1); renderCalendar(); });
document.getElementById('nextMonth').addEventListener('click', ()=>{ current.setMonth(current.getMonth()+1); renderCalendar(); });
yearSelect.addEventListener('change', ()=>{ current.setFullYear(Number(yearSelect.value)); renderCalendar(); });

/* Add note */
addNoteBtn.addEventListener('click', ()=>{
  const v = noteInput.value.trim(); if(!v) return;
  noteInput.value = '';
  // save to Firestore (or local)
  saveNoteToFirestore(v);
});

/* save note */
async function saveNoteToFirestore(text){
  if(!useFirestore || !db){
    notes.push({ id: uid(), text, iso: new Date().toISOString() });
    renderNotes(); return;
  }
  try{
    await db.collection('notes').add({ text, createdAt: firebase.firestore.FieldValue.serverTimestamp() });
  }catch(e){ console.warn('saveNote', e); }
}

/* add event for today helper */
function addEventForToday(label){
  const now = new Date();
  const iso = isoFor(now.getFullYear(), now.getMonth()+1, now.getDate());
  saveEventToFirestore(iso, label);
}

/* saveEventToFirestore implemented above */

/* Water button behavior */
waterBtn.addEventListener('click', async ()=>{
  if(!selectedDateISO){
    alert('Bitte zun√§chst ein Datum im Kalender ausw√§hlen, auf das du das Gie√üen setzen m√∂chtest.');
    return;
  }
  await toggleWateringFor(selectedDateISO);
});

/* toggleWateringFor implemented above */

/* Winter checklist modal controls */
winterBtn.addEventListener('click', ()=>{
  modalBackdrop.classList.remove('hidden'); modalBackdrop.style.display='flex';
  renderChecklistItems();
});
closeChecklist.addEventListener('click', ()=>{ modalBackdrop.classList.add('hidden'); modalBackdrop.style.display='none'; });

function renderChecklistItems(){
  checklistItems.innerHTML = '';
  (winterChecklist || []).forEach((it, idx)=>{
    const row = document.createElement('div'); row.className='row';
    const cb = document.createElement('input'); cb.type='checkbox'; cb.checked = !!it.done;
    cb.addEventListener('change', async ()=>{ winterChecklist[idx].done = cb.checked; await saveChecklistToFirestore(); renderChecklistItems(); });
    const label = document.createElement('div'); label.style.flex='1'; label.textContent = it.text;
    const del = document.createElement('button'); del.textContent='√ó'; del.addEventListener('click', async ()=>{ winterChecklist.splice(idx,1); await saveChecklistToFirestore(); renderChecklistItems(); });
    row.appendChild(cb); row.appendChild(label); row.appendChild(del);
    checklistItems.appendChild(row);
  });
}
addChecklistBtn.addEventListener('click', async ()=>{ const v = newChecklistItem.value.trim(); if(!v) return; winterChecklist.push({ id: uid(), text:v, done:false }); newChecklistItem.value=''; await saveChecklistToFirestore(); renderChecklistItems(); });
saveChecklist.addEventListener('click', async ()=>{ await saveChecklistToFirestore(); alert('Checkliste gespeichert.'); });

/* Firestore initial fetch of checklist if firestore used */
async function loadChecklistFromFirestore(){
  if(!useFirestore || !db) return;
  try{
    const doc = await db.collection('appdata').doc('winterChecklist').get();
    if(doc.exists){ const d = doc.data(); if(d && Array.isArray(d.items)) winterChecklist = d.items; }
    renderChecklistItems();
  }catch(e){ console.warn('loadChecklist', e); }
}
loadChecklistFromFirestore();

/* Toggle plants UI already implemented earlier */

/* Basic helpers for local fallback already in code */

/* end of script */
</script>
</body>
</html>
